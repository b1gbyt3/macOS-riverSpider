name: Test riverSpider setup script on macOS

on: 
  push:
    branches: [ main ]
    paths: 
      - 'install.sh'
  
  pull_request: 
    branches: [ main ]
    paths: 
      - 'install.sh'
  
  workflow_dispatch:

jobs:
  test-macos-install:
    name: Run Install Script on macOS
    runs-on: macos-latest
    
    env:
      GOOGLE_APP_SCRIPT_WEB_APP_ID: ${{ secrets.GOOGLE_APP_SCRIPT_WEB_APP_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Execute Script
        timeout-minutes: 10
        shell: bash
        run: |
          if [ -z "$GOOGLE_APP_SCRIPT_WEB_APP_ID" ]; then
              echo "ERROR: GOOGLE_APP_SCRIPT_WEB_APP_ID secret is not set."
              echo "Please configure the secret in your repository settings."
              exit 1
          fi

          WEB_APP_URL="https://script.google.com/macros/s/${GOOGLE_APP_SCRIPT_WEB_APP_ID}/exec"
          echo "Executing install script: bash ./install.sh"
          echo -e "y\n${WEB_APP_URL}" | bash ./install.sh

          install_exit_code=$?

          if [ $install_exit_code -ne 0 ]; then
              echo "ERROR: install.sh script failed with exit code $install_exit_code."
              exit $install_exit_code
          fi
          echo "Install script finished successfully."
          ZSH_PROFILE_FILE="$HOME/.zprofile"
          BASH_PROFILE_FILE="$HOME/.bash_profile"
          PROFILE_FILE=""
          echo "Checking for riverspider function in profile files..."
          if [ -f "$ZSH_PROFILE_FILE" ] && grep -q 'riverspider()' "$ZSH_PROFILE_FILE"; then
              PROFILE_FILE="$ZSH_PROFILE_FILE"
          elif [ -f "$BASH_PROFILE_FILE" ] && grep -q 'riverspider()' "$BASH_PROFILE_FILE"; then
              PROFILE_FILE="$BASH_PROFILE_FILE"
          fi

          if [ -z "$PROFILE_FILE" ]; then
              echo "ERROR: Could not find the riverspider function definition in $ZSH_PROFILE_FILE or $BASH_PROFILE_FILE."
              exit 1
          fi
          echo "Sourcing profile file: $PROFILE_FILE"
          source "$PROFILE_FILE"
          echo "Profile sourced."
          if [ -z "${RIVER_SPIDER_DIR}" ] || [ ! -d "${RIVER_SPIDER_DIR}" ]; then
              echo "ERROR: RIVER_SPIDER_DIR variable is not set or not a directory after sourcing profile."
              exit 1
          fi
          echo "RIVER_SPIDER_DIR is set to: ${RIVER_SPIDER_DIR}"
          if ! command -v riverspider >/dev/null 2>&1; then
              echo "ERROR: 'riverspider' command is not available"
              exit 1
          fi
          echo "'riverspider' command is available"

          TEST_FILE_PATH="${RIVER_SPIDER_DIR}/test.ttpasm"
          if [ ! -f "$TEST_FILE_PATH" ]; then
              echo "ERROR: Test file not found at expected location: $TEST_FILE_PATH"
              exit 1
          fi
          echo "Found test file: $TEST_FILE_PATH"

          echo "Cleaning up potential previous output files..."
          rm -f "$RIVER_SPIDER_DIR/test.csv" "$RIVER_SPIDER_DIR/test.log" "$RIVER_SPIDER_DIR/test.tsv" "$RIVER_SPIDER_DIR/test.txt"
          echo "Cleanup done."

          echo "Running: riverspider \"$TEST_FILE_PATH\""

          riverspider "$TEST_FILE_PATH"
          riverspider_exit_code=$?

          if [ $riverspider_exit_code -ne 0 ]; then
              echo "ERROR: 'riverspider' command exited with code $riverspider_exit_code."
              exit 1
          fi
          if [ ! -f "$RIVER_SPIDER_DIR/test.csv" ] && \
             [ ! -f "$RIVER_SPIDER_DIR/test.log" ] && \
             [ ! -f "$RIVER_SPIDER_DIR/test.tsv" ]; then
              echo "ERROR: One or more expected output files (test.csv, test.log, test.tsv) were NOT created in ${RIVER_SPIDER_DIR}."
              exit 1
          fi
          echo "'riverspider' command executed successfully."